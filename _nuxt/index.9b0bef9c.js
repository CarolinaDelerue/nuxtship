const a=/"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/,l=/"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/,d=/^\s*["[{]|^\s*-?\d[\d.]{0,14}\s*$/;function h(t,e){if(t!=="__proto__"&&!(t==="constructor"&&e&&typeof e=="object"&&"prototype"in e))return e}function R(t,e={}){if(typeof t!="string")return t;const n=t.toLowerCase().trim();if(n==="true")return!0;if(n==="false")return!1;if(n==="null")return null;if(n==="nan")return Number.NaN;if(n==="infinity")return Number.POSITIVE_INFINITY;if(n!=="undefined"){if(!d.test(t)){if(e.strict)throw new SyntaxError("Invalid JSON");return t}try{return a.test(t)||l.test(t)?JSON.parse(t,h):JSON.parse(t)}catch(s){if(e.strict)throw s;return t}}}const S=/\d/,N=["-","_","/","."];function y(t=""){if(!S.test(t))return t.toUpperCase()===t}function C(t,e){const n=e??N,s=[];if(!t||typeof t!="string")return s;let r="",u,f;for(const o of t){const c=n.includes(o);if(c===!0){s.push(r),r="",u=void 0;continue}const i=y(o);if(f===!1){if(u===!1&&i===!0){s.push(r),r=o,u=i;continue}if(u===!0&&i===!1&&r.length>1){const p=r[r.length-1];s.push(r.slice(0,Math.max(0,r.length-1))),r=p+o,u=i;continue}}r+=o,u=i,f=c}return s.push(r),s}function F(t){return t?t[0].toUpperCase()+t.slice(1):""}function I(t){return t?(Array.isArray(t)?t:C(t)).map(e=>F(e)).join(""):""}export{R as d,I as p};
